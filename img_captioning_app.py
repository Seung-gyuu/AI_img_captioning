from calendar import c
import gradio as gr
import numpy as np
from PIL import Image
from transformers import AutoProcessor, BlipForConditionalGeneration

# Autoprocessor: used for preprocessing data for the BLIP model. 
# can handle both image and text data, preparing it for input into the BLIP model.

# BLIP model: a transformer-based model designed for image captioning tasks.

# BlipForConditionalGeneration : can generate text based on an input image and an optional piece of text. 
# This makes it useful for tasks like image captioning or visual question answering, 
# where the model needs to generate text that describes an image or answer a question about an image.

processor = AutoProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

def caption_image(input_image: np.ndarray):
    if input_image is None:
        return "No image provided. Please upload an image."   
    
    # Convert numpy array to PIL Image and convert to RGB
    raw_image = Image.fromarray(input_image).convert('RGB')
    
    # Process the image
    inputs = processor(images=raw_image, return_tensors="pt") 

    # Generate a caption for the image
    outputs = model.generate(**inputs, max_length=50)

    # Decode the generated tokens to text and store it into `caption`
    caption = processor.decode(outputs[0], skip_special_tokens=True)
    
    return caption


with gr.Blocks(theme=gr.themes.Soft() , title=" Image Captioning Application ") as app:
    gr.Markdown("<div style='text-align: center; font-size:44px;'> üñºÔ∏è Image Captioning Application</div>")
    gr.Markdown("<div style='text-align: center;'>Upload an image and get a caption generated by the BLIP model.</div>")
    
    with gr.Row():
        with gr.Column():
            input_image = gr.Image(type="numpy", label="Upload Image")
            submit_btn = gr.Button("üì∏ Generate Caption")
        with gr.Column():
            output_caption = gr.Textbox(label="Generated Caption")

    submit_btn.click(fn = caption_image, inputs=input_image, outputs=output_caption)


app.launch(debug=True)
